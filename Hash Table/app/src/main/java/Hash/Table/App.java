/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package Hash.Table;

import com.sun.source.tree.WhileLoopTree;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Set;

public class App {

  public static String repated(String name) {
       String all=name;
       int spaceIndex=name.indexOf(" ",2);
         String word= all.substring(0,spaceIndex);
         all=all.substring(spaceIndex+1,all.length());
         String search= all;
         String checkWord="";
//         spaceIndex=search.indexOf(" ",2);
       while (! all.isBlank()){
           while (!search.isBlank()){
               if(search.indexOf(" ",1)!= -1){
                   spaceIndex=search.indexOf(" ",1);
                   checkWord= search.substring(0,spaceIndex);
                   search=search.substring(spaceIndex+1,search.length());
               }else {
                   checkWord=search;
                   search="";
               }
               if (word.equals(checkWord)){
                   return word;
               }
           }// nested while
if (all.indexOf(" ",2)!= -1){
    spaceIndex=all.indexOf(" ",1);
    word=all.substring(0,spaceIndex);
    all=all.substring(spaceIndex +1 ,all.length());
    search=all;
    spaceIndex=search.indexOf(" ",1);
}else {
    return "NO Repeat";
}
       }//end main while
        return "No Repeat";
    }

    // challenge 33

    public static Set leftJoin(HashMap <String,String> map1, HashMap <String,String> map2 ) {

     Set<String> set=new HashSet<>();


        for (String i:map1.keySet()
             ) {
//            if(map2.containsKey(i)) {    we don't need if to check if the key contain in second map because if the key not found will return null because String is object

                set.add(" "+ i +" , " +map1.get(i)+" , "+ map2.get(i)+ "");
//                    System.out.println(i + " Value " + map1.get(i));
//                }
//            else{
//                set.add(" "+ i +" , " +map1.get(i)+" , "+ map2.get(i)+ "");
//            }

            }


      return  set;
    }

    public static void main(String[] args) {
try {

//    System.out.println(repated("osama baniAta baniAta ahmad b5aniAta osama"));
}catch (Exception i){
    i.printStackTrace();
}

        HashMap <String,String> map1=new HashMap<>();
map1.put("osama","2021");
map1.put("ahmad","2055");

        HashMap <String,String> map2=new HashMap<>();
        map2.put("osama","Software Developer");
        map2.put("a","22111");
Set setLeftJoin= leftJoin(map1,map2);
        for (Object o : setLeftJoin) {
            System.out.println(o);
        }
//HashTable m=new HashTable(5);
//m.push(15,"osama");
//m.push(4,"Alli");
//m.push(2,"Mohammad");
//m.push(3,"OQlah");
//m.push(14,"14444");
//m.push(15,"15555");
//m.push(16,"16666");
//m.push(17,"17777");
//m.push(18,"18888");
//
//try {
//    System.out.println(m.get(20));//item not found
//
//    System.out.println(m.contains(18));
//}catch (Exception e){
//    e.printStackTrace();
//}
////m.printArray();
////        System.out.println(m.toString());
//
//    }
    }
}